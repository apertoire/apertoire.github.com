<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title> on Apertoire </title>
      <generator>Hugo</generator>
      <link>http://localhost:1313/</link>
      <description>Articles about Technology in general</description>
    <language>en-us</language>
    
    
    
    
    <item>
      <title>Gogs, an alternative to Gitlab</title>
      <link>http://localhost:1313/gogs-an-alternative-to-gitlab/</link>
      <pubDate>Sun, 15 Mar 2015 09:20:31 GMT</pubDate>
      
      <guid>http://localhost:1313/gogs-an-alternative-to-gitlab/</guid>
      <description>

&lt;p&gt;&lt;em&gt;tl;dr&lt;/em&gt; &lt;a href=&#34;https://gitlab.com&#34;&gt;Gitlab&lt;/a&gt; is a great git hosting service, almost as powerful as &lt;a href=&#34;https://github.com&#34;&gt;Github&lt;/a&gt;. But, is there something out there that&amp;rsquo;s comparable to Gitlab/Github, yet simpler to manage ? I think &lt;a href=&#34;http://gogs.io&#34;&gt;&lt;code&gt;Gogs&lt;/code&gt;&lt;/a&gt; does the job.&lt;/p&gt;

&lt;h2 id=&#34;introduction:5880767147774326ded8eaa664656f14&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;These days, Github has become the preferred platform to host code. With it&amp;rsquo;s many great features, ease of use and access, almost all software developers are happily using it.&lt;/p&gt;

&lt;p&gt;Also, since &lt;a href=&#34;http://arstechnica.com/information-technology/2015/03/google-to-close-google-code-open-source-project-hosting/&#34;&gt;Google Code hosting project is closing down&lt;/a&gt;, you can expect more projects being driven to it.&lt;/p&gt;

&lt;p&gt;But what if you&amp;rsquo;re writing some Android app, maybe you&amp;rsquo;re building the next great iOS game or in general, you&amp;rsquo;re writing some code that you don&amp;rsquo;t want to be exposed to the general public ?&lt;/p&gt;

&lt;p&gt;You could certainly purchase access to private Github repositories, but most certainly you&amp;rsquo;d rather want to invest your capital in more pressing matters.&lt;/p&gt;

&lt;p&gt;This is where software such as Gitlab, and Gogs, come very handy.&lt;/p&gt;

&lt;p&gt;They provide a service very similar to Github, with the difference that you can host them in your own servers, even in your own workstation.&lt;/p&gt;

&lt;p&gt;Read on for some more insight.&lt;/p&gt;

&lt;h2 id=&#34;gitlab:5880767147774326ded8eaa664656f14&#34;&gt;Gitlab&lt;/h2&gt;

&lt;p&gt;Gitlab is a powerful git service, with features that rival Github itself. It&amp;rsquo;s a mature project and it&amp;rsquo;s being continuously updated.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://about.gitlab.com/images/feature_page/activity_stream_full.png&#34; alt=&#34;gitlab&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;They recently acquired &lt;a href=&#34;https://gitorious.org/&#34;&gt;Gitorius&lt;/a&gt; (another Github-like service), so you can only assume that the feature set will expand (&lt;a href=&#34;http://thenextweb.com/insider/2015/03/03/gitlab-acquires-rival-gitorious-will-shut-june-1/&#34;&gt;check the press clip about the acquisition&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Installation has been undoubtedly improved since the &amp;lsquo;manual&amp;rsquo; days, which was time-consuming and very error prone.&lt;/p&gt;

&lt;p&gt;Now there&amp;rsquo;s a Linux deb/rpm package available (called the Omnibus), which handles all dependencies and simplifies the process.&lt;/p&gt;

&lt;p&gt;Upgrading is a bit more convoluted, especially if you&amp;rsquo;re coming from a version that&amp;rsquo;s prior to the last, but all in all, it&amp;rsquo;s not that complicated.&lt;/p&gt;

&lt;p&gt;Nevertheless, you can feel a lot of stuff is going on behind the scenes. You will be running Sidekiq, Unicorn, Nginx, Ruby (plus all it&amp;rsquo;s gems) and then Gitlab itself.&lt;/p&gt;

&lt;p&gt;Customizing the install is not that simple and if something should go wrong, there are many moving parts, where you would have to go looking for problems.&lt;/p&gt;

&lt;h2 id=&#34;enter-the-one-binary:5880767147774326ded8eaa664656f14&#34;&gt;Enter the One binary&lt;/h2&gt;

&lt;p&gt;On the other hand, we have &lt;a href=&#34;http://gogs.io&#34;&gt;Gogs&lt;/a&gt;. A single binary is all you need to run it.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s built with &lt;a href=&#34;https://golang.org&#34;&gt;Go&lt;/a&gt;, so you automatically get cross-platform compatibility.&lt;/p&gt;

&lt;p&gt;It runs on Windows, Mac, Linux, ARM, etc.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://gogs.io/imgs/screenshoots/1.png&#34; alt=&#34;gogs&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Installation simply requires unzipping the release archive into a chosen folder. That&amp;rsquo;s it. Upgrading works the same: just unzip the release archive.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s the beauty of binary deployment, that covers multiple platforms.&lt;/p&gt;

&lt;p&gt;Gogs has a really low footprint, so it&amp;rsquo;s easy on system resources (it can run on a &lt;a href=&#34;http://www.raspberrypi.org&#34;&gt;Raspberry Pi&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;You could run it as is, with the default configuration, or do some minimal tweaking.&lt;/p&gt;

&lt;p&gt;The default configuration file is located in &amp;lt;install folder&amp;gt;/conf/app.ini, but the &lt;a href=&#34;http://gogs.io/docs/installation/configuration_and_run.html&#34;&gt;documentation suggests&lt;/a&gt; to write your changes in &amp;lt;install folder&amp;gt;/custom/conf/app.ini, so that when you upgrade, your customizations are preserved (since conf/app.ini is overwritten).&lt;/p&gt;

&lt;p&gt;There are three sensible changes you could consider:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Repository location&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;[repository]
ROOT = !! this is the location where you want to keep the repositories !!
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Database location&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;[database]
PATH = !! this is the location of your database (sqlite3 by default) !!
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Public key to enable commit over ssh&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/sshkey.png&#34; alt=&#34;sshkey&#34; title=&#34;ssh public key&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Note that currently, you need to run an ssh server (&lt;a href=&#34;http://www.openssh.com&#34;&gt;openssh&lt;/a&gt; will do fine), the same as Gitlab.&lt;/p&gt;

&lt;h2 id=&#34;comparison:5880767147774326ded8eaa664656f14&#34;&gt;Comparison&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s compare both products to see how they match up in terms of feature set. I&amp;rsquo;ll throw in Github, as a reference.&lt;/p&gt;

&lt;div class=&#34;table&#34;&gt;
        &lt;table class=&#34;pricing&#34;&gt;
            &lt;tbody&gt;
            &lt;tr&gt;
                &lt;th&gt;&lt;h3 class=&#34;tableheader&#34;&gt;Feature&lt;/h3&gt;&lt;/th&gt;
                &lt;th&gt;&lt;h3 class=&#34;version&#34;&gt; Gogs&lt;/h3&gt;&lt;/th&gt;
                &lt;th&gt;&lt;h3 class=&#34;version&#34;&gt; Gitlab&lt;/h3&gt;&lt;/th&gt;
                &lt;th&gt;&lt;h3 class=&#34;version&#34;&gt; Github&lt;/h3&gt;&lt;/th&gt;
            &lt;/tr&gt;

            &lt;tr&gt;
                &lt;td&gt;Dashboard &amp;amp; File Browser&lt;/td&gt;
                &lt;td&gt;&lt;span class=&#34;yes&#34;&gt;yes&lt;/span&gt;&lt;/td&gt;
                &lt;td&gt;&lt;span class=&#34;yes&#34;&gt;yes&lt;/span&gt;&lt;/td&gt;
                &lt;td&gt;&lt;span class=&#34;yes&#34;&gt;yes&lt;/span&gt;&lt;/td&gt;
            &lt;/tr&gt;
            
            &lt;tr&gt;
                &lt;td&gt;Issue Tracking, Milestones &amp;amp; Commit keywords&lt;/td&gt;
                &lt;td&gt;&lt;span class=&#34;yes&#34;&gt;yes&lt;/span&gt;&lt;/td&gt;
                &lt;td&gt;&lt;span class=&#34;yes&#34;&gt;yes&lt;/span&gt;&lt;/td&gt;
                &lt;td&gt;&lt;span class=&#34;yes&#34;&gt;yes&lt;/span&gt;&lt;/td&gt;
            &lt;/tr&gt;

            &lt;tr&gt;
                &lt;td&gt;Organizations support&lt;/td&gt;
                &lt;td&gt;&lt;span class=&#34;yes&#34;&gt;yes&lt;/span&gt;&lt;/td&gt;
                &lt;td&gt;&lt;span class=&#34;yes&#34;&gt;yes&lt;/span&gt;&lt;/td&gt;
                &lt;td&gt;&lt;span class=&#34;yes&#34;&gt;yes&lt;/span&gt;&lt;/td&gt;
            &lt;/tr&gt;
             
            &lt;tr&gt;
                &lt;td&gt;Wiki&lt;/td&gt;
                &lt;td&gt;&lt;span class=&#34;no&#34;&gt;no&lt;/span&gt;&lt;/td&gt;
                &lt;td&gt;&lt;span class=&#34;yes&#34;&gt;yes&lt;/span&gt;&lt;/td&gt;
                &lt;td&gt;&lt;span class=&#34;yes&#34;&gt;yes&lt;/span&gt;&lt;/td&gt;
            &lt;/tr&gt;
            
            &lt;tr&gt;
                &lt;td&gt;Code Review&lt;/td&gt;
                &lt;td&gt;&lt;span class=&#34;no&#34;&gt;no&lt;/span&gt;&lt;/td&gt;
                &lt;td&gt;&lt;span class=&#34;yes&#34;&gt;yes&lt;/span&gt;&lt;/td&gt;
                &lt;td&gt;&lt;span class=&#34;yes&#34;&gt;yes&lt;/span&gt;&lt;/td&gt;
            &lt;/tr&gt;
        

                
            &lt;tr&gt;
                &lt;td&gt;Code Snippets&lt;/td&gt;
                &lt;td&gt;&lt;span class=&#34;no&#34;&gt;no&lt;/span&gt;&lt;/td&gt;
                &lt;td&gt;&lt;span class=&#34;yes&#34;&gt;yes&lt;/span&gt;&lt;/td&gt;
                &lt;td&gt;&lt;span class=&#34;yes&#34;&gt;yes&lt;/span&gt;&lt;/td&gt;
            &lt;/tr&gt;

            &lt;tr&gt;
                &lt;td&gt;Web Hooks&lt;/td&gt;
                &lt;td&gt;&lt;span class=&#34;yes&#34;&gt;yes&lt;/span&gt;&lt;/td&gt;
                &lt;td&gt;&lt;span class=&#34;yes&#34;&gt;yes&lt;/span&gt;&lt;/td&gt;
                &lt;td&gt;&lt;span class=&#34;yes&#34;&gt;yes&lt;/span&gt;&lt;/td&gt;
            &lt;/tr&gt;

            &lt;tr&gt;
                &lt;td&gt;Git Hooks&lt;/td&gt;
                &lt;td&gt;&lt;span class=&#34;yes&#34;&gt;yes&lt;/span&gt;&lt;/td&gt;
                &lt;td&gt;* Enterprise&lt;/td&gt;
                &lt;td&gt;* Enterprise&lt;/td&gt;
            &lt;/tr&gt;

            &lt;tr&gt;
                &lt;td&gt;LDAP Group Sync&lt;/td&gt;
                &lt;td&gt;&lt;span class=&#34;no&#34;&gt;no&lt;/span&gt;&lt;/td&gt;
                &lt;td&gt;* Enterprise&lt;/td&gt;
                &lt;td&gt;* Enterprise&lt;/td&gt;
            &lt;/tr&gt;

            &lt;tr&gt;
                &lt;td&gt;Branded Login Page&lt;/td&gt;
                &lt;td&gt;&lt;span class=&#34;no&#34;&gt;no&lt;/span&gt;&lt;/td&gt;
                &lt;td&gt;* Enterprise&lt;/td&gt;
                &lt;td&gt;* Enterprise&lt;/td&gt;
            &lt;/tr&gt;

            &lt;tr&gt;
                &lt;td&gt;&amp;nbsp;&lt;/td&gt;
                &lt;td&gt;&amp;nbsp;&lt;/td&gt;
                &lt;td&gt;&amp;nbsp;&lt;/td&gt;
                &lt;td&gt;&amp;nbsp;&lt;/td&gt;
            &lt;/tr&gt;

            &lt;tr&gt;
                &lt;td&gt;Language&lt;/td&gt;
                &lt;td&gt;Go&lt;/td&gt;
                &lt;td&gt;Ruby&lt;/td&gt;
                &lt;td&gt;Ruby&lt;/td&gt;
            &lt;/tr&gt;

            &lt;tr&gt;
                &lt;td&gt;Platform&lt;/td&gt;
                &lt;td&gt;Cross-Platform&lt;/td&gt;
                &lt;td&gt;Linux&lt;/td&gt;
                &lt;td&gt;* Virtual Machine&lt;/td&gt;
            &lt;/tr&gt;

            &lt;tr&gt;
                &lt;td&gt;License&lt;/td&gt;
                &lt;td&gt;MIT&lt;/td&gt;
                &lt;td&gt;MIT&lt;/td&gt;
                &lt;td&gt;Proprietary&lt;/td&gt;
            &lt;/tr&gt;           


            &lt;tr&gt;
                &lt;td&gt;Resource Usage&lt;/td&gt;
                &lt;td&gt;Low&lt;/td&gt;
                &lt;td&gt;Medium/High&lt;/td&gt;
                &lt;td&gt;Medium/High&lt;/td&gt;
            &lt;/tr&gt;
          &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Code Review (and pull requests) is arguably the most important missing feature. It&amp;rsquo;s at the top of the list among &lt;a href=&#34;https://github.com/gogits/gogs/issues/5&#34;&gt;Gogs Github issues&lt;/a&gt; and Gogs&amp;rsquo;s main developer (&lt;a href=&#34;https://github.com/Unknwon&#34;&gt;Unknwon&lt;/a&gt;) is working on it.&lt;/p&gt;

&lt;p&gt;But all said, you have a very functional private Git host service.&lt;/p&gt;

&lt;h2 id=&#34;running-a-gogs-docker:5880767147774326ded8eaa664656f14&#34;&gt;Running a Gogs docker&lt;/h2&gt;

&lt;p&gt;I &lt;a href=&#34;http://localhost:1313/dockeritazion.md&#34;&gt;previously described&lt;/a&gt; how I &amp;lsquo;dockerized&amp;rsquo; my home server environment, so it&amp;rsquo;s only fitting that I would run gogs as a Docker container.&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s do it step by step.&lt;/p&gt;

&lt;p&gt;I have an apps folder in my server home directory (/home/kayak/apps) and create subfolders per each app I deploy as a Docker container.&lt;/p&gt;

&lt;p&gt;Download and unzip the latest version (use the archive that corresponds to your platform)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd /home/kayak/apps
$ wget http://gogs.dn.qbox.me/gogs_v0.5.13_linux_amd64.zip
$ unzip gogs_v0.5.13_linux_amd64.zip
$ rm gogs_v0.5.13_linux_amd64.zip
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;optional-customize-the-configuration:5880767147774326ded8eaa664656f14&#34;&gt;Optional | Customize the configuration&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ cd gogs
$ mkdir -p custom/conf
$ cd custom/conf
$ nano app.ini
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[repository]
ROOT = !! this is the location where you want to keep the repositories !!

[database]
PATH = !! this is the location of your database (sqlite3 by default) !!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;NOTE&lt;/em&gt;&lt;/strong&gt;: At this point, you could simply run &lt;strong&gt;gogs web&lt;/strong&gt; and you&amp;rsquo;d have it running normally, not as docker container.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s create our Dockerfile&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd /home/kayak/apps/gogs
$ nano Dockerfile
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;FROM ubuntu:14.04

ENV DEBIAN_FRONTEND noninteractive

RUN sed &#39;s/main$/main universe multiverse/&#39; -i /etc/apt/sources.list &amp;amp;&amp;amp; \
	apt-get update &amp;amp;&amp;amp; apt-mark hold initscripts &amp;amp;&amp;amp; \
	apt-get install -y sudo openssh-server git &amp;amp;&amp;amp; \
	apt-get clean

EXPOSE 22 3000

RUN addgroup --gid 501 kayak &amp;amp;&amp;amp; adduser --uid 501 --gid 501 --disabled-password --gecos &#39;kayak&#39; kayak &amp;amp;&amp;amp; adduser kayak sudo

WORKDIR /home/kayak
ENV HOME /home/kayak

ENTRYPOINT [&amp;quot;/home/kayak/boot&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Dockerfile is based on the latest Ubuntu server LTS version (14.04).&lt;/p&gt;

&lt;p&gt;We then install sudo, openssh and git, expose ports 22 (for ssh) and 3000 (for the gogs web interface).&lt;/p&gt;

&lt;p&gt;Additionally, I generally create a user (&lt;em&gt;kayak&lt;/em&gt; in this case) with the same uid/gid as my user in my Mac box, to prevent issues with access permissions.&lt;/p&gt;

&lt;p&gt;Finally, the boot shell script is called to get things running.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ touch boot
$ chmod +x boot
$ nano boot
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash

sudo -u kayak -H touch /home/kayak/.ssh/authorized_keys
chmod 700 /home/kayak/.ssh &amp;amp;&amp;amp; chmod 600 /home/kayak/.ssh/authorized_keys

# start openssh server
mkdir /var/run/sshd
/usr/sbin/sshd -D &amp;amp;

exec sudo -u kayak /home/kayak/gogs web
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What this does is run the ssh daemon and then run gogs, as kayak user (rather than root, which is the default).&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s build the image&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ cd /home/kayak/apps/gogs
$ docker build --rm -t apertoire/gogs .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once the image is built, we can run it with&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$ docker run -d --name gogs \
-v /etc/localtime:/etc/localtime:ro \
-v /home/kayak/apps/gogs:/home/kayak \
-p 62723:22 \
-p 3000:3000 \
apertoire/gogs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can check the command line to see that it&amp;rsquo;s running.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/gogs-running.png&#34; alt=&#34;gogs&#34; title=&#34;gogs&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Now you can open the web interface, and it will show an install page (for first-time run)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/gogsinstall.jpg&#34; alt=&#34;gogsinstall&#34; title=&#34;Gogs first-time run install page&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Once you have completed the install, you&amp;rsquo;ll have a functional Gogs service.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/gogsweb.jpg&#34; alt=&#34;gogsweb&#34; title=&#34;Gogs Web&#34; /&gt;
&lt;/p&gt;

&lt;h2 id=&#34;conclusion:5880767147774326ded8eaa664656f14&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Gogs is a lightweight, easy to set up, cross-platform git hosting service, with features favorably comparable to Gitlab/Github.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s not as mature as the other two, but it&amp;rsquo;s still incredibly capable.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s also open source, so you can contribute to improve it.&lt;/p&gt;

&lt;p&gt;I replaced my Gitlab installation with Gogs a couple of months ago and haven&amp;rsquo;t looked back.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m hosting 42 repositories and have found performance to be extremely good.&lt;/p&gt;

&lt;p&gt;I definitely recommend Gogs as your git self-hosting service.&lt;/p&gt;

&lt;h2 id=&#34;final-notes:5880767147774326ded8eaa664656f14&#34;&gt;Final Notes&lt;/h2&gt;

&lt;p&gt;Hope you found the article interesting.&lt;/p&gt;

&lt;p&gt;Please leave your comments here or &lt;a href=&#34;https://twitter.com/intent/tweet?text=Gogs+,+an+alternative+to+Gitlab&amp;amp;amp;via=apertoire_&amp;amp;amp;url=http%3A%2F%2Fwww.apertoire.net%2Fgogs-an-alternative-to-gitlab%2F&amp;amp;amp;hashtags=gogs,gitlab,github,golang&#34;&gt;send a tweet&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    
    <item>
      <title>Switching from zsh to fish</title>
      <link>http://localhost:1313/switching-from-zsh-to-fish/</link>
      <pubDate>Sat, 22 Nov 2014 07:50:25 GMT</pubDate>
      
      <guid>http://localhost:1313/switching-from-zsh-to-fish/</guid>
      <description>

&lt;p&gt;&lt;em&gt;tl;dr&lt;/em&gt; How easy is it to switch from &lt;a href=&#34;http://www.zsh.org&#34;&gt;zsh&lt;/a&gt; to &lt;a href=&#34;http://www.fishshell.com&#34;&gt;fish&lt;/a&gt; ? Is it worth it ?&lt;/p&gt;

&lt;h2 id=&#34;background:7bc69ddf17cb9e92a57da6ecb95eb783&#34;&gt;Background&lt;/h2&gt;

&lt;p&gt;In the beginning &amp;hellip; there was &lt;a href=&#34;http://www.gnu.org/software/bash/&#34;&gt;bash&lt;/a&gt; and all was good.&lt;/p&gt;

&lt;p&gt;The built-in OSX terminal catered to my needs whenever I had to wander into shell land.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/terminal.png&#34; alt=&#34;terminal&#34; title=&#34;terminal&#34; /&gt;
&lt;/p&gt;

&lt;h2 id=&#34;the-road-to-enlightenment:7bc69ddf17cb9e92a57da6ecb95eb783&#34;&gt;The Road to Enlightenment&lt;/h2&gt;

&lt;p&gt;But when I started hearing about &lt;a href=&#34;https://iterm2.com&#34;&gt;iTerm2&lt;/a&gt;, themes (&lt;a href=&#34;http://ethanschoonover.com/solarized&#34;&gt;Solarized&lt;/a&gt;, &lt;a href=&#34;https://github.com/ChrisKempson/Tomorrow-Theme&#34;&gt;Tomorrow&lt;/a&gt;, etc.) and dotfiles (&lt;a href=&#34;https://dotfiles.github.io/&#34;&gt;Github dotfiles&lt;/a&gt;, &lt;a href=&#34;https://github.com/holman/dotfiles&#34;&gt;Holman dotfiles&lt;/a&gt;, etc.), there was only one possible outcome: &lt;em&gt;zsh&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;And I embraced &lt;a href=&#34;http://ohmyz.sh/&#34;&gt;oh-my-zsh&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The almost infinite amount of themes, functionality I never knew I needed until I used it (&lt;a href=&#34;https://github.com/sjl/z-zsh&#34;&gt;z&lt;/a&gt;, history substring search, syntax highlighting, etc.) made me feel at home.&lt;/p&gt;

&lt;p&gt;Bash was just a kindergarten kid compared to my new and all-mighty shell.&lt;/p&gt;

&lt;p&gt;I heard some rumors about this shell with a funny name, took a look at the website and said, hey &amp;hellip; zsh does all that already ! You shall not pass !&lt;/p&gt;

&lt;h2 id=&#34;make-things-as-simple-as-possible-but-not-simpler:7bc69ddf17cb9e92a57da6ecb95eb783&#34;&gt;Make things as simple as possible, but not simpler&lt;/h2&gt;

&lt;p&gt;The thing is &amp;hellip; I &lt;strong&gt;strive&lt;/strong&gt; to simplify my work environment as much as I can.&lt;/p&gt;

&lt;p&gt;As great as oh-my-zsh is, it brings a lot of baggage. If you want to customize, you need to dig deeper and dedicate a fair amount of time to make it work exactly the way you want.&lt;/p&gt;

&lt;p&gt;When I double checked the &lt;em&gt;fish&lt;/em&gt; documentation, it promised a lot of built-in functionality with minimal fuss if you wanted to extend and customize.&lt;/p&gt;

&lt;p&gt;Was that really the case ?&lt;/p&gt;

&lt;p&gt;Only one way to find out.&lt;/p&gt;

&lt;h2 id=&#34;the-red-pill:7bc69ddf17cb9e92a57da6ecb95eb783&#34;&gt;The Red pill&lt;/h2&gt;

&lt;p&gt;I took the easy route&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew install fish
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(you are using &lt;a href=&#34;http://brew.sh&#34;&gt;Homebrew&lt;/a&gt; to install anything on your Mac right ?)&lt;/p&gt;

&lt;p&gt;Right out of the box, you get syntax highlighting, command muted suggestion, history substring search
&lt;img src=&#34;http://localhost:1313/img/fish2.png&#34; alt=&#34;suggestion&#34; title=&#34;suggestion&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;.zshrc is nowhere to be found, instead you have .config/fish/config.sh, which is very similar, only the syntax changes.&lt;/p&gt;

&lt;p&gt;This is my config.fish&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set -x PATH /usr/local/opt/coreutils/libexec/gnubin $HOME/bin /usr/local/bin /usr/bin /bin /usr/sbin /sbin

set -x GOROOT /usr/local/opt/go/libexec
set -x GOPATH ~/code

# fuxor git to non-interactively merge commits
set -x GIT_MERGE_AUTOEDIT no

# Set where to install casks
set -x HOMEBREW_CASK_OPTS &amp;quot;--appdir=/Applications&amp;quot;

# Setup terminal, and turn on colors
set -x TERM xterm-256color
set -xU LS_COLORS &amp;quot;di=34:ln=35:so=32:pi=33:ex=31:bd=34;46:cd=34:su=0:sg=0:tw=0:ow=0:&amp;quot;

# Enable color in grep
set -x GREP_OPTIONS &#39;--color=auto&#39;
set -x GREP_COLOR &#39;3;33&#39;

set -x LESS &#39;--ignore-case --raw-control-chars&#39;
set -x PAGER &#39;less&#39;
set -x EDITOR &#39;nano&#39;

set -x LANG en_US.UTF-8
set -x LC_CTYPE &amp;quot;en_US.UTF-8&amp;quot;
set -x LC_MESSAGES &amp;quot;en_US.UTF-8&amp;quot;
set -x LC_COLLATE C

source functions/z.fish
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Two notes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I always&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;brew install coreutils
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and put the GNU versions of the core commands first in the path.
That&amp;rsquo;s why I set the LS_COLORS environment variable, rather than the LSCOLORS that you would normally use in OSX.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I currently hold some miscellaneous scripts in ~/bin, which I then put in my path for quick access. In the future, I will symlink those scripts to /usr/local/bin, so I won&amp;rsquo;t need to add $HOME/bin in my PATH env var.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Extension and customization is achieved via a common path: functions and more elegantly, autoloading functions.&lt;/p&gt;

&lt;p&gt;So, aliases are no more, instead you declare a function inside self contained file in ~/.config/fish/functions.&lt;/p&gt;

&lt;p&gt;Very simple and very elegant.&lt;/p&gt;

&lt;p&gt;These are the functions I currently have:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/fish3.png&#34; alt=&#34;functions&#34; title=&#34;functions&#34; /&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;fish_prompt.fish  |  customizes my prompt&lt;/li&gt;
&lt;li&gt;gpl.fish  |  prints a pretty git log&lt;/li&gt;
&lt;li&gt;hal.fish  |  ssh&amp;rsquo;s to one of my servers&lt;/li&gt;
&lt;li&gt;l.fish  |  is a shortcut to ls -al &amp;ndash;color=always&lt;/li&gt;
&lt;li&gt;mkd.fish  |  creates a dir and cd&amp;rsquo;s to it&lt;/li&gt;
&lt;li&gt;skynet  |  ssh&amp;rsquo;s to one of my servers&lt;/li&gt;
&lt;li&gt;wopr  |  ssh&amp;rsquo;s to one of my servers&lt;/li&gt;
&lt;li&gt;z.fish  |  is fish&amp;rsquo;s version of z (you can find it &lt;a href=&#34;https://github.com/roryokane/z-fish&#34;&gt;here&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is my prompt (a slightly modified clearance theme that you can find &lt;a href=&#34;https://github.com/bpinto/oh-my-fish/tree/master/themes/clearance&#34;&gt;here&lt;/a&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# name: clearance
# ---------------
# Based on idan. Display the following bits on the left:
# - Virtualenv name (if applicable, see https://github.com/adambrenecki/virtualfish)
# - Current directory name
# - Git branch and dirty state (if inside a git repo)

function _git_branch_name
  echo (command git symbolic-ref HEAD ^/dev/null | sed -e &#39;s|^refs/heads/||&#39;)
end

function _git_is_dirty
  echo (command git status -s --ignore-submodules=dirty ^/dev/null)
end

function _remote_hostname
  echo (whoami)@(hostname)
end

function fish_prompt
  set -l cyan (set_color cyan)
  set -l yellow (set_color yellow)
  set -l red (set_color red)
  set -l blue (set_color blue)
  set -l green (set_color green)
  set -l normal (set_color normal)
  set -l mywhite (set_color -o white)
  set -l mygreen (set_color -o green)

  set -l cwd $blue(pwd | sed &amp;quot;s:^$HOME:~:&amp;quot;)

  set -l dove $mygreen (pwd | sed &amp;quot;s:^$HOME:~:&amp;quot;)

  set -l whowheredate &#39;[&#39; $mywhite (_remote_hostname) $normal &#39; &#39; (date &amp;quot;+%H:%M&amp;quot;) &#39;] &#39;

  # Output the prompt, left to right

  # Add a newline before new prompts
  echo -e &#39;&#39;

  # User@server time
  echo -n -s $whowheredate

  # Print pwd or full path
  echo -n -s $dove $normal

  # Show git branch and status
  if [ (_git_branch_name) ]
    set -l git_branch (_git_branch_name)

    if [ (_git_is_dirty) ]
      set git_info &#39;(&#39; $yellow $git_branch &amp;quot; ±&amp;quot; $normal &#39;)&#39;
    else
      set git_info &#39;(&#39; $green $git_branch $normal &#39;)&#39;
    end
    echo -n -s &#39; &#39; $git_info $normal
  end

  # Terminate with a nice prompt char
  echo -e &#39;&#39;
  echo -e -n -s &#39;⟩ &#39; $normal
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is gpl.fish&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function gpl
	git log --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&amp;lt;%an&amp;gt;%Creset&#39; --abbrev-commit
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;l.fish&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function l
	ls -lah --color=always $argv
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;conclusion:7bc69ddf17cb9e92a57da6ecb95eb783&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;m currently using fish as my shell and it has been working great. I definitely recommend it.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve found only one missing functionality: history sharing between sessions.&lt;/p&gt;

&lt;p&gt;I generally have a couple tabs open, and fish doesn&amp;rsquo;t share commands between tabs.&lt;/p&gt;

&lt;p&gt;I understand it&amp;rsquo;s been worked on.&lt;/p&gt;
</description>
    </item>
    
    
    <item>
      <title>Actor-like pattern in go</title>
      <link>http://localhost:1313/actor-like-pattern-in-go/</link>
      <pubDate>Sat, 08 Nov 2014 14:19:14 GMT</pubDate>
      
      <guid>http://localhost:1313/actor-like-pattern-in-go/</guid>
      <description>

&lt;p&gt;&lt;em&gt;tl;dr&lt;/em&gt; This article discusses an implementation of the actor paradigm in a go application.&lt;/p&gt;

&lt;h2 id=&#34;background:e034edceebc4ec317cbc445f31253b8a&#34;&gt;Background&lt;/h2&gt;

&lt;p&gt;Currently, there are two well known languages that support actors: &lt;a href=&#34;http://www.erlang.org&#34;&gt;Erlang&lt;/a&gt; and &lt;a href=&#34;http://www.scala-lang.org&#34;&gt;Scala&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The core concept is that modules (actors) in your application communicate exchanging messages, which makes concurrency very easy to handle for developers.&lt;/p&gt;

&lt;p&gt;This is in contrast to thread-based concurrency (like in C++), where the developer has much more work to do to get the system working correctly.&lt;/p&gt;

&lt;h2 id=&#34;mediabase:e034edceebc4ec317cbc445f31253b8a&#34;&gt;Mediabase&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/mediabase1.png&#34; alt=&#34;front&#34; title=&#34;front&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;I will use the Mediabase application (check my &lt;a href=&#34;http://localhost:1313/introducing-mediabase/&#34;&gt;previous article&lt;/a&gt;) to showcase the proposed architecture.&lt;/p&gt;

&lt;p&gt;Very shortly, Mediabase is a proof-of-concept application to catalogue a media library consisting of movies. It scans the folders you choose looking for movies, then fetches metadata from &lt;a href=&#34;http://www.themoviedb.org&#34;&gt;themoviedb.org&lt;/a&gt; and &lt;a href=&#34;http://www.omdbapi.com&#34;&gt;The OMDB API&lt;/a&gt; and presents the information in a nice web page.&lt;/p&gt;

&lt;p&gt;You can get the code &lt;a href=&#34;https://github.com/apertoire/mediabase&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;architecture:e034edceebc4ec317cbc445f31253b8a&#34;&gt;Architecture&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s take a look at a high-level view of the code structure:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/architecture.png&#34; alt=&#34;architecture&#34; title=&#34;architecture&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;What we have here are very loosely coupled services (actors), interacting with each other by means of a system wide bus (message exchange).&lt;/p&gt;

&lt;p&gt;Each service carries a single responsibility, with the exception of the &lt;em&gt;Core&lt;/em&gt; service, which is kind of a manager, as it coordinates work between services.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s see what each service does&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Server&lt;/em&gt;: It runs the web server and communicates with the front end via a chosen protocol. In this case it&amp;rsquo;s a rest api, but could also be websockets&lt;/li&gt;
&lt;li&gt;&lt;em&gt;DAL&lt;/em&gt;: It&amp;rsquo;s in charge of the database, all db requests have to go through here&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Scanner&lt;/em&gt;: It scans the folder chosen by the user, looking for media to be collected (via regular expressions).&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Scraper&lt;/em&gt;: Hits the TMDB and OMDB apis to gather metadata for the movies found by the Scanner service.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Cache&lt;/em&gt;: Once metadata is received, it downloads movie art (cover, backdrop, etc) and stores it in a local folder&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Pruner&lt;/em&gt;: Removes database media entries that are no longer present in the physical folders&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Core&lt;/em&gt;: It&amp;rsquo;s an orchestrator, directing other services to do it&amp;rsquo;s bidding.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;implementation:e034edceebc4ec317cbc445f31253b8a&#34;&gt;Implementation&lt;/h2&gt;

&lt;p&gt;So how is all of this implemented ?&lt;/p&gt;

&lt;h3 id=&#34;basic-structure:e034edceebc4ec317cbc445f31253b8a&#34;&gt;Basic structure&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s start with the &lt;em&gt;Bus&lt;/em&gt;. (&lt;a href=&#34;https://github.com/apertoire/mediabase/blob/master/server/bus/bus.go&#34;&gt;source&lt;/a&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type Bus struct {
	...
	ImportMovies       chan *message.Status
	ImportMoviesStatus chan *message.Status

	ScanMovies  chan *message.ScanMovies
	ScrapeMovie chan *message.Movie

	MovieFound     chan *message.Movie
	MovieScraped   chan *message.Media
	MovieRescraped chan *message.Media

	ImportMoviesFinished chan int
	...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;em&gt;Bus&lt;/em&gt; struct holds the channels that are used by the services to communicate. Different types of messages are defined, based on which functionality is needed.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s check how services are built. (&lt;a href=&#34;https://github.com/apertoire/mediabase/blob/master/server/services/scanner.go&#34;&gt;source&lt;/a&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type Scanner struct {
	Bus    *bus.Bus
	Config *model.Config

	re           []*helper.Rexp
	includedMask string
}

func (self *Scanner) Start() {
	mlog.Info(&amp;quot;starting scanner service ...&amp;quot;) 
	mlog.Info(&amp;quot;compiling regular expressions ...&amp;quot;)

	self.re = make([]*helper.Rexp, 0)

	for _, regex := range self.Config.MediaRegexs {
		self.re = append(self.re, &amp;amp;helper.Rexp{Exp: regexp.MustCompile(regex)})
	}

	self.includedMask = &amp;quot;.bdmv|.iso|.img|.nrg|.mkv|.avi|.xvid|.ts|.mpg|.dvr-ms|.mdf|.wmv|.ifo&amp;quot;

	go self.react()

	mlog.Info(&amp;quot;scanner service started&amp;quot;)
}

func (self *Scanner) Stop() {
	mlog.Info(&amp;quot;scanner service stopped&amp;quot;)
}

func (self *Scanner) react() {
	for {
		select {
		case msg := &amp;lt;-self.Bus.ScanMovies:
			go self.doScanMovies(msg.Reply)
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each service holds a reference to the &lt;em&gt;Bus&lt;/em&gt;, which is injected at creation time (we&amp;rsquo;ll see that later).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Start function does any required initialization, but most importantly it triggers a listening loop: the react function.&lt;/li&gt;
&lt;li&gt;The Stop function does any cleanup that may be needed.&lt;/li&gt;
&lt;li&gt;The react function uses a classic Go construct: a for/select loop.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The react function is the heart of the service: it sits there waiting for a message to arrive in order to dispatch some work.&lt;/p&gt;

&lt;h3 id=&#34;process-walkthrough:e034edceebc4ec317cbc445f31253b8a&#34;&gt;Process walkthrough&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s track how the import process moves along, so we get a better idea on how the services interact.&lt;/p&gt;

&lt;p&gt;It begins with &lt;em&gt;Server&lt;/em&gt; receiving an API request to import movies, which makes it run the importMovies function. (&lt;a href=&#34;https://github.com/apertoire/mediabase/blob/master/server/services/server.go#L127&#34;&gt;source&lt;/a&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func (self *Server) importMovies(c *gin.Context) {
	msg := message.Status{Reply: make(chan *message.Context)}
	self.Bus.ImportMovies &amp;lt;- &amp;amp;msg
	reply := &amp;lt;-msg.Reply

	c.JSON(200, &amp;amp;reply)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It creates an ImportMovies message with a reply channel on which it sits waiting. Once the response is received, it sends it back to the front end.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Core&lt;/em&gt; is listening for a message on the ImportMovies channel. (&lt;a href=&#34;https://github.com/apertoire/mediabase/blob/master/server/services/core.go#L55&#34;&gt;source&lt;/a&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func (self *Core) react() {
	for {
		select {
		...
		case msg := &amp;lt;-self.Bus.ImportMovies:
			go self.doImportMovies(msg)

		case msg := &amp;lt;-self.Bus.ImportMoviesStatus:
			go self.doImportMoviesStatus(msg)

		case msg := &amp;lt;-self.Bus.MovieFound:
			go self.doMovieFound(msg)

		case msg := &amp;lt;-self.Bus.MovieScraped:
			go self.doMovieScraped(msg)

		case msg := &amp;lt;-self.Bus.ImportMoviesFinished:
			go self.doImportMoviesFinished(msg)
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It runs a finite state machine to control the flow of execution, but it basically does: (&lt;a href=&#34;https://github.com/apertoire/mediabase/blob/master/server/services/core.go#L110&#34;&gt;source&lt;/a&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func (self *Core) importer(e *fsm.Event) {
	if e.Src == &amp;quot;idle&amp;quot; {
		msg := message.ScanMovies{Reply: make(chan string)}
		self.Bus.ScanMovies &amp;lt;- &amp;amp;msg
		reply := &amp;lt;-msg.Reply

		self.context.Message = reply
	}

	status, _ := e.Args[0].(*message.Status)
	status.Reply &amp;lt;- &amp;amp;self.context
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It sends a ScanMovies message and waits for a reply. When the reply is received, it is sent back to the original requestor (&lt;em&gt;Server&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;Scanner&lt;/em&gt; service is listening for the ScanMovies message. (&lt;a href=&#34;https://github.com/apertoire/mediabase/blob/master/server/services/scanner.go#L76&#34;&gt;source&lt;/a&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func (self *Scanner) doScanMovies(reply chan string) {
	reply &amp;lt;- &amp;quot;Movie scannning process started ...&amp;quot;

	for _, folder := range self.Config.MediaFolders {
		err := self.walker(folder)
		if err != nil {
			mlog.Info(&amp;quot;Unable to scan movies: %s&amp;quot;, err)
		}

		mlog.Info(&amp;quot;Completed scan of folder: %s&amp;quot;, folder)
	}

	self.Bus.ImportMoviesFinished &amp;lt;- 1
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first thing it does is reply indicating that the import process has started. This message will go all the way back to the front end.&lt;/p&gt;

&lt;p&gt;It then starts walking through the media folders looking for movies.&lt;/p&gt;

&lt;p&gt;Whenever new media is found, a MovieFound message is delivered on the &lt;em&gt;Bus&lt;/em&gt;. (&lt;a href=&#34;https://github.com/apertoire/mediabase/blob/master/server/services/scanner.go#L131&#34;&gt;source&lt;/a&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...
	movie := &amp;amp;message.Movie{Title: rmap[&amp;quot;Name&amp;quot;], 
				File_Title: rmap[&amp;quot;Name&amp;quot;],
				Year: rmap[&amp;quot;Year&amp;quot;],
				Resolution: resolution,
				FileType: rmap[&amp;quot;FileType&amp;quot;],
				Location: path}

	mlog.Info(&amp;quot;FOUND [%s] (%s)&amp;quot;, movie.Title, movie.Location)

	self.Bus.MovieFound &amp;lt;- movie
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Core&lt;/em&gt; listens for the MovieFound message. (&lt;a href=&#34;https://github.com/apertoire/mediabase/blob/master/server/services/core.go#L131&#34;&gt;source&lt;/a&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func (self *Core) doMovieFound(movie *message.Movie) {
	c := make(chan bool)

	self.Bus.CheckMovie &amp;lt;- &amp;amp;message.CheckMovie{Movie: movie, Result: c}
	exists := &amp;lt;-c

	var text string
	if exists {
		text = fmt.Sprintf(&amp;quot;SKIPPED: present in db [%s] (%s)&amp;quot;, movie.Title, movie.Location)
		mlog.Info(text)
	} else {
		text = fmt.Sprintf(&amp;quot;FOUND: [%s] (%s)&amp;quot;, movie.Title, movie.Location)
		self.Bus.ScrapeMovie &amp;lt;- movie
	}

	self.fsm.Event(&amp;quot;found&amp;quot;, text)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It first checks that the movie is not present in the database (by sending a CheckMovie message which is answered by the &lt;em&gt;DAL&lt;/em&gt; service). If it&amp;rsquo;s not in the db, it then sends a ScrapeMovie request.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;Scraper&lt;/em&gt; service is waiting for this message: (&lt;a href=&#34;https://github.com/apertoire/mediabase/blob/master/server/services/scraper.go#L89&#34;&gt;source&lt;/a&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func (self *Scraper) requestWork(movie *message.Movie) {
	mlog.Info(&amp;quot;WORK REQUESTED [%s]&amp;quot;, movie.Title)

	c := make(chan *message.Media)

	gig := &amp;amp;Gig{
		self.Bus,
		self.tmdb,
		&amp;amp;message.Media{BaseUrl: &amp;quot;&amp;quot;, SecureBaseUrl: &amp;quot;&amp;quot;, BasePath: &amp;quot;&amp;quot;, Movie: movie, Forced: false},
		c,
	}

	self.workpool.PostWork(&amp;quot;gig&amp;quot;, gig)

	media := &amp;lt;-c

	self.Bus.MovieScraped &amp;lt;- media

	mlog.Info(&amp;quot;WORK COMPLETED [%s]&amp;quot;, movie.Title)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Scraper&lt;/em&gt; has a workpool of workers that parallelize the download of metadata from TMDB and OMDB. It starts a worker (self.workpool.PostWork) sending it a channel to reply to when it&amp;rsquo;s done.&lt;/p&gt;

&lt;p&gt;When the worker is done, &lt;em&gt;Scraper&lt;/em&gt; delivers a MovieScraped message on the bus, which is expected by &lt;em&gt;Core&lt;/em&gt;. (&lt;a href=&#34;https://github.com/apertoire/mediabase/blob/master/server/services/core.go#L157&#34;&gt;source&lt;/a&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func (self *Core) doMovieScraped(media *message.Media) {
	go func() {
		mlog.Info(&amp;quot;STORING MOVIE [%s]&amp;quot;, media.Movie.Title)
		self.Bus.StoreMovie &amp;lt;- media.Movie
	}()

	go func() {
		mlog.Info(&amp;quot;CACHING MEDIA [%s]&amp;quot;, media.Movie.Title)
		media.BasePath = self.Config.DataDir
		self.Bus.CacheMedia &amp;lt;- media

		self.fsm.Event(&amp;quot;scrape&amp;quot;, media.Movie)
	}()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Core&lt;/em&gt; starts two goroutines to trigger two parallel messages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;StoreMovie: so that the movie is stored in the database (this is done by the &lt;em&gt;DAL&lt;/em&gt; service)&lt;/li&gt;
&lt;li&gt;CacheMedia: so that the movie art (cover, backdrop) is downloaded and stored in a local folder (this is done by the &lt;em&gt;Cache&lt;/em&gt; service)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The front end has previously received an initial reply to the import movies API request and displayed it to the user.&lt;/p&gt;

&lt;p&gt;It then does long-polling on the server, to get a progress report. The ImportMovieStatus message is senty by &lt;em&gt;Server&lt;/em&gt; and answered by &lt;em&gt;Core&lt;/em&gt;: (&lt;a href=&#34;https://github.com/apertoire/mediabase/blob/master/server/services/core.go#L127&#34;&gt;source&lt;/a&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func (self *Core) doImportMoviesStatus(status *message.Status) {
	status.Reply &amp;lt;- &amp;amp;self.context
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It simply sends back the current status of importing, since each message activity received by &lt;em&gt;Core&lt;/em&gt; is written to the context variable.
&lt;img src=&#34;http://localhost:1313/img/mediabase3.png&#34; alt=&#34;settings2&#34; title=&#34;settings2&#34; /&gt;
&lt;/p&gt;

&lt;h2 id=&#34;conclusion:e034edceebc4ec317cbc445f31253b8a&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s wrap it up with the beginning.&lt;/p&gt;

&lt;p&gt;The whole system is started by some bootstrap code (&lt;a href=&#34;https://github.com/apertoire/mediabase/blob/master/server/boot.go&#34;&gt;source&lt;/a&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func main() {
	config := model.Config{}
	config.Init(Version)

	bus := bus.Bus{}
	dal := services.Dal{Bus: &amp;amp;bus, Config: &amp;amp;config}
	server := services.Server{Bus: &amp;amp;bus, Config: &amp;amp;config}
	scanner := services.Scanner{Bus: &amp;amp;bus, Config: &amp;amp;config}
	scraper := services.Scraper{Bus: &amp;amp;bus, Config: &amp;amp;config}
	pruner := services.Pruner{Bus: &amp;amp;bus, Config: &amp;amp;config}
	cache := services.Cache{Bus: &amp;amp;bus, Config: &amp;amp;config}

	list := []services.Service{&amp;amp;dal, &amp;amp;scanner, &amp;amp;scraper, &amp;amp;pruner, &amp;amp;cache}
	core := services.Core{Bus: &amp;amp;bus, Config: &amp;amp;config, Services: list}

	bus.Start()
	dal.Start()
	server.Start()
	scanner.Start()
	scraper.Start()
	pruner.Start()
	cache.Start()
	core.Start()

	mlog.Info(&amp;quot;press enter to stop ...&amp;quot;)
	var input string
	fmt.Scanln(&amp;amp;input)

	core.Stop()
	cache.Stop()
	pruner.Stop()
	scraper.Stop()
	scanner.Stop()
	server.Stop()
	dal.Stop()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each service is created and injected with &lt;em&gt;Bus&lt;/em&gt; and &lt;em&gt;Config&lt;/em&gt;. Then each one of them is started, system waits on an input and it is then stopped.&lt;/p&gt;

&lt;h2 id=&#34;alternatives:e034edceebc4ec317cbc445f31253b8a&#34;&gt;Alternatives&lt;/h2&gt;

&lt;p&gt;There are a couple of alternatives I can think of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make each channel buffered and don&amp;rsquo;t start a goroutine when responding to messages, so that only one activity is running on a service at any given time.&lt;/li&gt;
&lt;li&gt;Rather than a central bus, use a pubsub architecture to dispatch messages. I&amp;rsquo;m looking into this for another application I&amp;rsquo;m building, but it has the drawback that you lose static type checking, as I defined the messaging payload to be interface{}.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;epilogue:e034edceebc4ec317cbc445f31253b8a&#34;&gt;Epilogue&lt;/h2&gt;

&lt;p&gt;Hope you found the article interesting.&lt;/p&gt;

&lt;p&gt;If so, please leave your comments here, &lt;a href=&#34;https://twitter.com/apertoire_&#34;&gt;send a tweet&lt;/a&gt; or go to the &lt;a href=&#34;https://github.com/apertoire/&#34;&gt;github page&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    
    <item>
      <title>Introducing mediabase</title>
      <link>http://localhost:1313/introducing-mediabase/</link>
      <pubDate>Mon, 27 Oct 2014 12:16:47 GMT</pubDate>
      
      <guid>http://localhost:1313/introducing-mediabase/</guid>
      <description>

&lt;p&gt;&lt;em&gt;tl;dr&lt;/em&gt; &lt;strong&gt;mediabase&lt;/strong&gt; is a proof-of-concept application to catalogue a media library consisting of movies. It scans the folders you choose looking for movies, then fetch metadata from &lt;a href=&#34;www.themoviedb.org&#34;&gt;themoviedb.org&lt;/a&gt; and &lt;a href=&#34;www.omdbapi.com&#34;&gt;The OMDB API&lt;/a&gt; and present the information in a nice web page.&lt;/p&gt;

&lt;p&gt;Check the &lt;a href=&#34;https://github.com/apertoire/mediabase&#34;&gt;github page&lt;/a&gt; for binaries, source code and other general instructions.&lt;/p&gt;

&lt;h2 id=&#34;rationale:0ef5819b3d0866a814affe7bdac79c25&#34;&gt;Rationale&lt;/h2&gt;

&lt;p&gt;The main driver to develop this application was to increase my knowledge of the underlying technologies that power the app.&lt;/p&gt;

&lt;p&gt;I will follow up with two additional posts to go into the details of building the app: the first part about the server code and the second part about the client code.&lt;/p&gt;

&lt;p&gt;But now, let&amp;rsquo;s take a small tour to go over the features.&lt;/p&gt;

&lt;h2 id=&#34;first-run:0ef5819b3d0866a814affe7bdac79c25&#34;&gt;First Run&lt;/h2&gt;

&lt;p&gt;Upon first run, you are prompted to enter the folder where your movie collection is stored. This has to be a path relative to the machine where the server is running.&lt;/p&gt;

&lt;p&gt;The scanner expects the same naming convention as the one used by popular media apps such as &lt;a href=&#34;http://plex.tv&#34;&gt;Plex&lt;/a&gt;, &lt;a href=&#34;http://mediabrowser.tv&#34;&gt;MediaBrowser&lt;/a&gt;, &lt;a href=&#34;http://www.jriver.com&#34;&gt;JRiver Media Center&lt;/a&gt; and others.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/mediabase2.png&#34; alt=&#34;settings&#34; title=&#34;settings&#34; /&gt;
&lt;/p&gt;

&lt;h2 id=&#34;importing-media:0ef5819b3d0866a814affe7bdac79c25&#34;&gt;Importing media&lt;/h2&gt;

&lt;p&gt;Once you have entered a folder, click on the IMPORT button to start importing media.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/mediabase3.png&#34; alt=&#34;settings2&#34; title=&#34;settings2&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;The process will search for movies, look them up in &lt;a href=&#34;http://www.themoviedb.org&#34;&gt;themoviedb.org&lt;/a&gt; and &lt;a href=&#34;http://www.omdbapi.com&#34;&gt;The OMDB&lt;/a&gt;, collect all the metadata, store it in a database and then make them available via a web page.&lt;/p&gt;

&lt;h2 id=&#34;cover-screen:0ef5819b3d0866a814affe7bdac79c25&#34;&gt;Cover screen&lt;/h2&gt;

&lt;p&gt;The first screen you&amp;rsquo;ll see after import is done is the cover screen (here&amp;rsquo;s showing just a portion of the screen).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/mediabase4.png&#34; alt=&#34;cover&#34; title=&#34;cover&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;This view shows the most recently imported movies and is the default screen when you open the app.&lt;/p&gt;

&lt;h2 id=&#34;movie-details-screen:0ef5819b3d0866a814affe7bdac79c25&#34;&gt;Movie Details screen&lt;/h2&gt;

&lt;p&gt;When you click the Movies menu option, a new page is shown, with a more detailed view of the movies, where you can filter or sort by different criteria.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/mediabase5.png&#34; alt=&#34;movies&#34; title=&#34;movies&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;It shows the poster, a backdrop, running time, IMDB rating, director, actors, country, genres, resolution (if your naming structure contained a resolution field), location, last time watched (if watched) and the date it was added to the application.&lt;/p&gt;

&lt;p&gt;Additionally, it has fields where you can fix the TMDB id (if the automatic metadata fetcher picked the wrong movie) and you can set a date and rating for a movie you watched. (see the end of the article for some caveats regarding the fix TMDB id functionality).&lt;/p&gt;

&lt;p&gt;You can sort movies by different criteria, as seen below&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/mediabase6.png&#34; alt=&#34;sort&#34; title=&#34;sort&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Also, you can filter movies, by searching as you type (with a small delay to prevent too much traffic), again by different criteria&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/mediabase7.png&#34; alt=&#34;filter&#34; title=&#34;filter&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;You have to see it to believe it, it&amp;rsquo;s working pretty smooth.&lt;/p&gt;

&lt;h2 id=&#34;tools:0ef5819b3d0866a814affe7bdac79c25&#34;&gt;Tools&lt;/h2&gt;

&lt;p&gt;In addition to importing movies, you can either search for duplicates or prune movies that are no longer stored in the media folders.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Duplicates&lt;/strong&gt; works by comparing title names, it&amp;rsquo;s pretty basic at this moment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Prune&lt;/strong&gt; deletes from the database all movies that are missing from the folder where they&amp;rsquo;re supposed to be located. Since this has the potential to wipeout precious data you&amp;rsquo;ve collected about your movie (such as watched date, you may have fixed the TMDB id, etc), you need to use it with caution (in fact, i will disable it for the first public release).&lt;/p&gt;

&lt;h2 id=&#34;about:0ef5819b3d0866a814affe7bdac79c25&#34;&gt;About&lt;/h2&gt;

&lt;p&gt;Finally there&amp;rsquo;s a nice about page, mostly giving credit where it&amp;rsquo;s due :)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/mediabase8.png&#34; alt=&#34;about&#34; title=&#34;about&#34; /&gt;
&lt;/p&gt;

&lt;h2 id=&#34;caveats:0ef5819b3d0866a814affe7bdac79c25&#34;&gt;Caveats&lt;/h2&gt;

&lt;p&gt;There a couple of things that don&amp;rsquo;t work as I&amp;rsquo;d want them to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When fixing a movie via TMDB id, the information is not immediately refreshed (this will be fixed in a future release)&lt;/li&gt;
&lt;li&gt;The date field (to set a date when you watched the movie) has a picker which works fine in Chrome (Mac), but wouldn&amp;rsquo;t in Safari (Mac). I tried a cross-browser solution, but it didn&amp;rsquo;t initially work (this will be fixed in a future release)&lt;/li&gt;
&lt;li&gt;Chrome at some point in time crashes (just the page containing the app), due to memory usage. Safari churns happily along no matter what you throw at it. This has to do with the fact that I&amp;rsquo;m blindly loading pics of megabytes in size, which is certainly not optimal. (this will be addressed in a future release)&lt;/li&gt;
&lt;li&gt;General error checking (can improve it to be more robust under different scenarios)&lt;/li&gt;
&lt;li&gt;General ui validations (no empty fields when saving/fixing, etc.)&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    
    <item>
      <title>Dockerization</title>
      <link>http://localhost:1313/dockeritazion/</link>
      <pubDate>Thu, 09 Jan 2014 23:23:23 GMT</pubDate>
      
      <guid>http://localhost:1313/dockeritazion/</guid>
      <description>

&lt;h2 id=&#34;background:7168b982f076d28b250775e790646ac1&#34;&gt;Background&lt;/h2&gt;

&lt;p&gt;so, &lt;a href=&#34;http://www.apertoire.net/storage-wars/&#34;&gt;back in 2012&lt;/a&gt; i posted about virtualizing my media storage and general backup infrastructure.&lt;/p&gt;

&lt;p&gt;today i will post about going back to bare metal &amp;hellip; well, sort of :)&lt;/p&gt;

&lt;p&gt;just a couple of days ago, &lt;a href=&#34;http://lime-technology.com/forum/index.php?topic=21514.0&#34;&gt;my setup&lt;/a&gt; was running and working mostly fine&lt;/p&gt;

&lt;p&gt;the biggest nuisance was that since i didn&amp;rsquo;t leave the unraid boxes running 24x7, each time i wanted to turn them on, i had to start the unraid vms, then turn the das boxes and finally start the array manually. kind of tedious.&lt;/p&gt;

&lt;p&gt;fast forward to 2013, esxi 5.5 is out and you start to hear that vsphere client will be crippled as far as new esxi versions are concerned.&lt;/p&gt;

&lt;p&gt;some discussions started showing up in the unraid forums, about virtualizing unraid under xen or kvm.&lt;/p&gt;

&lt;p&gt;the time was ripe for an overhaul of my infrastructure, get rid of esxi and move on to either xen or kvm. or so i thought.&lt;/p&gt;

&lt;h2 id=&#34;research:7168b982f076d28b250775e790646ac1&#34;&gt;Research&lt;/h2&gt;

&lt;p&gt;although a lot of topics were being discussed in the unraid forums, something that got to me, was the fact that actually i should be running unraid as close to the hardware as possible, which meant de-virtualizing my esxi vms.&lt;/p&gt;

&lt;p&gt;at about the same time, a new player entered the scene, which i&amp;rsquo;d heard about before, but never really understood&lt;/p&gt;

&lt;p&gt;enter &lt;a href=&#34;http://www.docker.io/&#34;&gt;Docker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;it made a huge difference to think in terms of containerized lightweight applications rather than full blown vms.&lt;/p&gt;

&lt;p&gt;i wouldn&amp;rsquo;t even need xen nor kvm, if i could get the apps i ran on my vms to run as docker containers.&lt;/p&gt;

&lt;p&gt;that&amp;rsquo;s what i set out to do, and that&amp;rsquo;s what i achieved.&lt;/p&gt;

&lt;p&gt;this is the story of what i did&lt;/p&gt;

&lt;h2 id=&#34;step-by-step:7168b982f076d28b250775e790646ac1&#34;&gt;Step by Step&lt;/h2&gt;

&lt;h3 id=&#34;devirtualize-unraids:7168b982f076d28b250775e790646ac1&#34;&gt;Devirtualize unraids&lt;/h3&gt;

&lt;p&gt;i removed 2 m1015s from my head server and installed them in two Asrock motherboards in each Norco case. I purchased the following components&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Motherboad: 2x &lt;a href=&#34;http://www.amazon.com/gp/product/B00FIWSIVS/ref=oh_details_o05_s00_i00?ie=UTF8&amp;amp;psc=1&#34;&gt;ASRock H87M PRO4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CPU: 2x &lt;a href=&#34;http://www.amazon.com/gp/product/B00EUVEFEC/ref=oh_details_o07_s00_i01?ie=UTF8&amp;amp;psc=1&#34;&gt;Intel I3-4130T&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;RAM: 1X &lt;a href=&#34;http://www.amazon.com/gp/product/B006WAGGUK/ref=oh_details_o07_s00_i00?ie=UTF8&amp;amp;psc=1&#34;&gt;Crucial Ballistix Sport 8GB Kit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;set-up-the-new-virtualization-host:7168b982f076d28b250775e790646ac1&#34;&gt;Set up the new virtualization host&lt;/h3&gt;

&lt;p&gt;installed Ubuntu 12.04.3 LTS, with zfs, docker and kvm support. hard disks were used as follows&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
    &lt;td&gt;Qty. &amp;nbsp;&lt;/td&gt;
    &lt;td&gt;Item&lt;/td&gt;
    &lt;td&gt;Filesystem/Layout&lt;/td&gt;
    &lt;td&gt;Usage&lt;/td&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
    &lt;td&gt;1x&lt;/td&gt;
    &lt;td&gt;120Gb SSD &amp;nbsp;&lt;/td&gt;
    &lt;td&gt;ext4&lt;/td&gt;
    &lt;td&gt;boot and general purpose (/home, etc.)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;2x&lt;/td&gt;
    &lt;td&gt;2Tb HD&lt;/td&gt;
    &lt;td&gt;luks encrypted zfs mirror pool &amp;nbsp;&lt;/td&gt;
    &lt;td&gt;encrypted backup storage&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;2x&lt;/td&gt;
    &lt;td&gt;1.5Tb HD&lt;/td&gt;
    &lt;td&gt;zfs mirror pool&lt;/td&gt;
    &lt;td&gt;staging area for nzb downloading&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;1x&lt;/td&gt;
    &lt;td&gt;0.5Tb HD&lt;/td&gt;
    &lt;td&gt;zfs pool&lt;/td&gt;
    &lt;td&gt;working area for nzb downloading&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;4x&lt;/td&gt;
    &lt;td&gt;1Tb HD&lt;/td&gt;
    &lt;td&gt;zfs striped mirror pool&lt;/td&gt;
    &lt;td&gt;general purpose storage (databases, etc.)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;having enabled zfs, now i needed to run my apps.&lt;/p&gt;

&lt;p&gt;i managed to dockerize nzbget and filebot.&lt;/p&gt;

&lt;p&gt;sickbeard was customized based on an image from the docker index&lt;/p&gt;

&lt;h3 id=&#34;profit:7168b982f076d28b250775e790646ac1&#34;&gt;Profit&lt;/h3&gt;

&lt;p&gt;great success !!!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/docker.png&#34; alt=&#34;docker&#34; title=&#34;docker&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/dockerimages.png&#34; alt=&#34;dockerimages&#34; title=&#34;dockerimages&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/htop.png&#34; alt=&#34;htop&#34; title=&#34;htop&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/pool1.png&#34; alt=&#34;pool1&#34; title=&#34;pool1&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/pool2.png&#34; alt=&#34;pool2&#34; title=&#34;pool2&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/zfslist.png&#34; alt=&#34;zfslist&#34; title=&#34;zfslist&#34; /&gt;
&lt;/p&gt;

&lt;h2 id=&#34;conclusion:7168b982f076d28b250775e790646ac1&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;i&amp;rsquo;m currently working on a postgresql and gitlab container.&lt;/p&gt;
</description>
    </item>
    
    
    <item>
      <title>Running a Java Vert.x app on Heroku</title>
      <link>http://localhost:1313/running-a-java-vertx-app-on-heroku/</link>
      <pubDate>Wed, 24 Apr 2013 23:23:23 GMT</pubDate>
      
      <guid>http://localhost:1313/running-a-java-vertx-app-on-heroku/</guid>
      <description>

&lt;p&gt;That&amp;rsquo;s right. This is Yet Another Running Vert.x on Heroku Article !&lt;/p&gt;

&lt;p&gt;It does have some differences with regards to other articles though. Let&amp;rsquo;s see.&lt;/p&gt;

&lt;p&gt;You can check the &lt;a href=&#34;https://vaultee.herokuapp.com&#34;&gt;live app&lt;/a&gt; right now !&lt;/p&gt;

&lt;h2 id=&#34;background:461b8cf77832a406c331e02ddcd71060&#34;&gt;Background&lt;/h2&gt;

&lt;p&gt;Since I &lt;a href=&#34;http://localhost:1313/vaultee/&#34;&gt;published the code&lt;/a&gt; for a proof of concept vert.x/angularjs/bootstrap  app on &lt;a href=&#34;https://github.com/apertoire/vaultee/&#34;&gt;github&lt;/a&gt;, I considered how easy/difficult it would be to make it run on one of the popular Paas.&lt;/p&gt;

&lt;p&gt;I first considered &lt;a href=&#34;https://openshift.redhat.com/&#34;&gt;OpenShift&lt;/a&gt; due to affinity (Vert.x and RedHat have become closer lately), but finally settled on Heroku due to purely personal reasons.&lt;/p&gt;

&lt;h2 id=&#34;research:461b8cf77832a406c331e02ddcd71060&#34;&gt;Research&lt;/h2&gt;

&lt;p&gt;I can reference back to two resources, which helped me move forward:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://fbflex.wordpress.com/2012/05/02/running-vert-x-applications-on-heroku/&#34;&gt;Running Vert.x Applications on Heroku&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://java.dzone.com/articles/setting-vertx-project-work&#34;&gt;Setting up a Vert.x Project to Work with Maven and NetBeans IDE 7.1 on OS X and Java 7&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first resource introduced me to buildpacks and the second showed me maven for app building. It was important because maven is &lt;a href=&#34;https://devcenter.heroku.com/articles/java&#34;&gt;the suggested way to run Java apps on heroku&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;step-by-step:461b8cf77832a406c331e02ddcd71060&#34;&gt;Step by Step&lt;/h2&gt;

&lt;p&gt;This is what I did&lt;/p&gt;

&lt;blockquote&gt;
$ mkdir myapp
$ cd myapp
&lt;/blockquote&gt;

&lt;p&gt;Copied source code from &lt;a href=&#34;https://github.com/apertoire/vaultee&#34;&gt;github&lt;/a&gt; into this folder and then initialize git&lt;/p&gt;

&lt;blockquote&gt;
$ git init&lt;br&gt;
$ git add .&lt;br&gt;
$ git commit -m &#39;initial commit&#39;
&lt;/blockquote&gt;

&lt;p&gt;Create a heroku app via cli (you need to &lt;a href=&#34;https://toolbelt.heroku.com/&#34;&gt;install heroku toolbelt&lt;/a&gt; first)&lt;/p&gt;

&lt;blockquote&gt;
$ heroku create myapp --stack cedar --buildpack https://github.com/apertoire/heroku-buildpack-vertx.git
&lt;/blockquote&gt;

&lt;p&gt;I modified the buildpack to support a java maven code structure, borrowing concepts from where &lt;a href=&#34;https://github.com/enr/heroku-buildpack-vertx&#34;&gt;it was forked&lt;/a&gt;, and from the &lt;a href=&#34;https://github.com/heroku/heroku-buildpack-java&#34;&gt;official heroku java buildpack&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can now push your code to heroku, to deploy it&lt;/p&gt;

&lt;blockquote&gt;
$ git push heroku master
&lt;/blockquote&gt;

&lt;p&gt;Next, I needed to initialize the postgresql backend.&lt;/p&gt;

&lt;p&gt;I ended up using &lt;a href=&#34;https://github.com/ddollar/heroku-pg-transfer&#34;&gt;pg-transfer&amp;rsquo;s heroku plugin&lt;/a&gt;, after reading about &lt;a href=&#34;https://devcenter.heroku.com/articles/heroku-postgresql&#34;&gt;postgresql support in heroku&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First, I found out the name of the postgresql database by running&lt;/p&gt;

&lt;blockquote&gt;
$ heroku config | grep postgres
&lt;/blockquote&gt;
    

&lt;p&gt;Then, the actual command to initialize the database was&lt;/p&gt;

&lt;blockquote&gt;
$ heroku pg:transfer --from postgres://dbuser:dbpassd@dbhost:dbport/dbname --to white --confirm myapp
&lt;/blockquote&gt;

&lt;p&gt;The &amp;ndash;from host is my local postgresql server.&lt;br /&gt;
The &amp;ndash;to host is the heroku postgresql instance and is referenced using heroku&amp;rsquo;s database color naming convention, since it was the only syntax that worked for me.&lt;/p&gt;

&lt;h2 id=&#34;a-couple-of-notes:461b8cf77832a406c331e02ddcd71060&#34;&gt;A Couple of Notes&lt;/h2&gt;

&lt;p&gt;In order to run your app on Heroku, they export some environment variables that you need to reference in your code, for things such as port, db host, db port, etc.&lt;/p&gt;

&lt;p&gt;So I had to refactor my code to support environment variables, which is arguably a best practice with regards to this matter.&lt;/p&gt;

&lt;p&gt;I defined and environment file, which holds this&lt;/p&gt;

&lt;blockquote&gt;
export PORT=9000&lt;br&gt;
export DATABASE_URL=postgres://dbuser:dbpass@dbhost:dbport/dbname
&lt;/blockquote&gt;

&lt;p&gt;This file is added to .gitignore. Then in server.js I did&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt;
load(&#39;vertx.js&#39;);

var webConf = {
    port: parseInt(vertx.env[&#39;PORT&#39;]),

    // Configuration for the event bus client side bridge
    // This bridges messages from the client side to the server side event bus
    bridge: true,

    // This defines which messages from the client we will let through
    // to the server side
    inbound_permitted: [
        { address: &#39;load:user&#39; },
        { address: &#39;load:assets&#39; },
        { address: &#39;load:revisions&#39; },
        { address: &#39;load:items&#39; },
        { address: &#39;load:itemTypes&#39; },
        { address: &#39;save:asset&#39; },
        { address: &#39;scrape:item&#39; }
    ],
        // This defines which messages from the server we will let through to the client
    outbound_permitted: [
        {}
    ]    
};
    
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Heroku provides an environment variable PORT and vert.x enables access to it via vertx.env() function.&lt;/p&gt;

&lt;p&gt;As for database vars, a bit uglier&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt;
var re = /^(postgres):\/\/(\S+):(\S+)@(\S+):(\S+)\/(\S+)$/;
var db = re.exec(vertx.env[&#39;DATABASE_URL&#39;]);

// logger.info(&#34;protocol: &#34; + result[1]);
// logger.info(&#34;username: &#34; + result[2]);
// logger.info(&#34;password: &#34; + result[3]);
// logger.info(&#34;address: &#34; + result[4]);
// logger.info(&#34;port: &#34; + result[5]);
// logger.info(&#34;dbname: &#34; + result[6]);

var dalConf = {
    host: db[4],
    username: db[2],
    password: db[3],
    port: parseInt(db[5]),
    dbname: db[6]
}
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;First we parse the DATABASE_URL variable and then use each separate component.&lt;/p&gt;

&lt;p&gt;To run the app locally, I create a shell script, play.sh&lt;/p&gt;

&lt;blockquote&gt;
source environment&lt;br&gt;
vertx run src/main/javascript/server.js -cp &#34;target/classes:target/dependency/postgresql-9.2-1002.jdbc4.jar:target/dependency/jbcrypt-0.3m.jar:target/dependency/joda-time-2.2.jar:target/dependency/jackson-databind-2.1.4.jar:target/dependency/jackson-core-2.1.4.jar:target/dependency/jackson-annotations-2.1.4.jar:target/dependency/jsoup-1.7.2.jar&#34;
&lt;/blockquote&gt;

&lt;p&gt;So I read in the environment variable and then run vert.x with server.js as the bootstrap code.&lt;/p&gt;

&lt;p&gt;On the Heroku side, I created a Procfile similar to my shell script, except for the &amp;ldquo;source environment&amp;rdquo; line, since the variables are provided by Heroku&lt;/p&gt;

&lt;blockquote&gt;
web: vertx run src/main/javascript/server.js -cp &#34;target/classes:target/dependency/postgresql-9.2-1002.jdbc4.jar:target/dependency/jbcrypt-0.3m.jar:target/dependency/joda-time-2.2.jar:target/dependency/jackson-databind-2.1.4.jar:target/dependency/jackson-core-2.1.4.jar:target/dependency/jackson-annotations-2.1.4.jar:target/dependency/jsoup-1.7.2.jar&#34;
&lt;/blockquote&gt;

&lt;p&gt;In both cases, I added all jar dependencies to the classpath, since vert.x uses URLoader to load classes at runtime and it doesn&amp;rsquo;t support wildcards.&lt;/p&gt;

&lt;p&gt;But the suggested way to package an app in vert.x is to convert it to a module, which is something I&amp;rsquo;ll look into in the future.&lt;/p&gt;

&lt;p&gt;Finally, a note on the &lt;a href=&#34;https://github.com/apertoire/heroku-buildpack-vertx&#34;&gt;Heroku buildpack&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It looks for a pom.xml file in the main folder. If found, it interprets the code as a vert.x app and starts the build process&lt;/p&gt;

&lt;p&gt;During the build, openjdk7 and vert.x are downloaded and then maven is run to download all declared dependencies and to compile java source code.&lt;/p&gt;

&lt;p&gt;Then Procfile is executed and the app is live !&lt;/p&gt;

&lt;h2 id=&#34;next-steps:461b8cf77832a406c331e02ddcd71060&#34;&gt;Next Steps&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Maybe we should use a &lt;a href=&#34;http://cliffmeyers.com/blog/2013/4/21/code-organization-angularjs-javascript&#34;&gt;different layout&lt;/a&gt; for the angularjs code of the app&lt;/li&gt;
&lt;li&gt;A followup article will showcase some of the patterns used for this proof of concept app&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    
    <item>
      <title>vaultee</title>
      <link>http://localhost:1313/vaultee/</link>
      <pubDate>Sat, 30 Mar 2013 23:23:23 GMT</pubDate>
      
      <guid>http://localhost:1313/vaultee/</guid>
      <description>

&lt;h2 id=&#34;introduction:a90668b4407087317d98aac5802a4c3c&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;vaultee&lt;/code&gt; is a proof of concept web app, designed to showcase mostly vert-x and angular.js capabilities.&lt;/p&gt;

&lt;p&gt;what it does, is keep track of different properties (assets) that you own, and automatically version each change performed (revisions), so you can go back in time to check.&lt;/p&gt;

&lt;p&gt;it is mostly suited to keep track of computer builds, but it can easily be extended to other kind of assets (thinking home theater setups and such).&lt;/p&gt;

&lt;h2 id=&#34;rationale:a90668b4407087317d98aac5802a4c3c&#34;&gt;Rationale&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://vertx.io&#34;&gt;&lt;code&gt;Vert.x&lt;/code&gt;&lt;/a&gt; is a great framework to build web applications.&lt;/p&gt;

&lt;p&gt;Applications are built on top of verticles, which perform their duties and communicate via a message passing bus architecture, that extends all the way to the client layer.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s a powerful concept. Concurrency is managed via an actors paradigm and message passing makes it very simple to communicate among all pieces of the software.&lt;/p&gt;

&lt;p&gt;There are similar frameworks or libraries that use the underlying concept of actors, at different levels:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.erlang.org/&#34;&gt;Erlang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.playframework.com/&#34;&gt;Play Framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://code.google.com/p/retlang/&#34;&gt;Retlang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.meteor.com/&#34;&gt;Meteor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But I believe only vert.x allows mixing different languages to construct your application.&lt;/p&gt;

&lt;p&gt;The other main component is &lt;a href=&#34;http://www.angularjs.org/&#34;&gt;&lt;code&gt;AngularJS&lt;/code&gt;&lt;/a&gt;. It provides a framework to structure apps on the client side, greatly simplifying your code.&lt;/p&gt;

&lt;p&gt;Finally, &lt;a href=&#34;http://twitter.github.com/bootstrap/&#34;&gt;&lt;code&gt;Bootstrap&lt;/code&gt;&lt;/a&gt; and a free theme from &lt;a href=&#34;http://bootswatch.com/&#34;&gt;&lt;code&gt;bootswatch&lt;/code&gt;&lt;/a&gt;, provide the eye candy.&lt;/p&gt;

&lt;h2 id=&#34;source-code:a90668b4407087317d98aac5802a4c3c&#34;&gt;Source Code&lt;/h2&gt;

&lt;p&gt;The code is alpha level, and I&amp;rsquo;m looking forward to get it reviewed by people more experienced than me.&lt;/p&gt;

&lt;p&gt;Please do send comments and pull requests !&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://github.com/apertoire/vaultee&#34;&gt;It&amp;rsquo;s available at Github&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;screenshots:a90668b4407087317d98aac5802a4c3c&#34;&gt;Screenshots&lt;/h2&gt;

&lt;p&gt;Home page, after login, showing all existing assets&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/all.png&#34; alt=&#34;homepage listing all assets&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Displaying one of the assets (currently on revision 2)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/assetview.png&#34; alt=&#34;display one asset&#34; /&gt;
&lt;/p&gt;
</description>
    </item>
    
    
    <item>
      <title>12D78</title>
      <link>http://localhost:1313/12D78/</link>
      <pubDate>Fri, 15 Mar 2013 23:23:23 GMT</pubDate>
      
      <guid>http://localhost:1313/12D78/</guid>
      <description>&lt;p&gt;so, it&amp;rsquo;s been quite a while now since my last update with regards to my hackintosh, old trusted blackbeard.&lt;/p&gt;

&lt;p&gt;i have to tell you &amp;hellip; it&amp;rsquo;s killing me the fact that sleep isnt working &amp;hellip; whenever i shutdown and come online again, i have to rearrange most of the windows in their corresponding workspace (i have 6 workspaces).&lt;/p&gt;

&lt;p&gt;but that&amp;rsquo;s &lt;em&gt;literally&lt;/em&gt; NOTHING compared to the fact that the whole system freezes, due to some god forsaken nvidia drivers for my gtx 660ti &amp;hellip; no incantation i tried made any difference &amp;hellip; and there are plenty of reports about this even on the official apple support forums (with regards to macbook pros and such).&lt;/p&gt;

&lt;p&gt;On March 14, 2013, Apple released 10.8.3 &amp;hellip; i&amp;rsquo;m expecting a lot from this update (since beta testers/developers were asked to specifically look for graphics upgrades).&lt;/p&gt;

&lt;p&gt;i hope my freeze problems are a thing of the past.&lt;/p&gt;

&lt;p&gt;i&amp;rsquo;m also trying to help a little with regards to the sleeping issue, by upgrading my system definition to macpro 5,1 &amp;hellip; supposedly 5,1 handles sleeping better than 3,1.&lt;/p&gt;

&lt;p&gt;on the other hand, i was reading in zite today that 10.8.3 fixed some sleeping issues in macbook pro retinas !!! wtff !!!! (what the flying f&amp;hellip; !!!)&lt;/p&gt;

&lt;p&gt;so i have to assume the following scenarios will eventually take place:&lt;/p&gt;

&lt;p&gt;&lt;uL&gt;
    &lt;li&gt;upgrading to 10.8.3 fixes the nvidia driver issues. all is good&lt;/li&gt;
    &lt;li&gt;upgrading to 10.8.3 doesn&amp;rsquo;t fix sheet, so i&amp;rsquo;m back to square one&lt;/li&gt;
    &lt;li&gt;driver fixed, i have to fix sleep issues &amp;hellip; there are several alternatives to look into for the sleeping issue: applehpa.kext &amp;hellip; kill it !&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;

&lt;p&gt;all things considered, blackbeard is so awesome !&lt;/p&gt;
</description>
    </item>
    
    
    <item>
      <title>moving to github pages</title>
      <link>http://localhost:1313/moving-to-github-pages/</link>
      <pubDate>Sun, 03 Mar 2013 23:23:23 GMT</pubDate>
      
      <guid>http://localhost:1313/moving-to-github-pages/</guid>
      <description>

&lt;p&gt;it all started when i started considering the deployment of the &lt;a href=&#34;http://vertx.io&#34;&gt;vert.x&lt;/a&gt; app i&amp;rsquo;m working on.&lt;/p&gt;

&lt;p&gt;i will deploy to &lt;a href=&#34;http://openshift.redhat.com&#34;&gt;OpenShift&lt;/a&gt;, but i will also open source the code through &lt;a href=&#34;https://github.com&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;so, when i was analyzing how to transfer the code over, i came across &lt;a href=&#34;https://pages.github.com&#34;&gt;Github Pages&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;i already had two sites:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;apertoire.net (hosted on &lt;a href=&#34;http://rackspace.com&#34;&gt;Rackspace&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;apertoire.tumblr.com (hosted on &lt;a href=&#34;http://tumblr.com&#34;&gt;Tumblr&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;the rackspace site held a wordpress blog and some software products i&amp;rsquo;ve developed over the years.&lt;/p&gt;

&lt;p&gt;i started the tumblr site when &lt;a href=&#34;http://localhost:1313/why-i-m-switching-to-mac-osx/&#34;&gt;i dove into mac osx&lt;/a&gt; and there i chronicled some other infrastructure endeavours.&lt;/p&gt;

&lt;p&gt;when i started digging into the whole github pages, i found out about custom domains and read a lot of articles about people switching from any blog framework to github pages.&lt;/p&gt;

&lt;p&gt;in my case, it makes a lot of sense as well:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;streamlined content creation and publishing (all i need is a text editor and git)&lt;/li&gt;
&lt;li&gt;no more messing around with wordpress&lt;/li&gt;
&lt;li&gt;no more maintenance of the hosted box (no more watching out for ubuntu updates)&lt;/li&gt;
&lt;li&gt;no more hosting fees !!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;the hosting fees aren&amp;rsquo;t really that much (about $12 per month), but in the end all savings add up.&lt;/p&gt;

&lt;p&gt;for the record, my custom domain transitions was done following instructions on &lt;a href=&#34;https://help.github.com/articles/setting-up-a-custom-domain-with-pages&#34;&gt;setting up a custom domain with pages&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;on my dns registrar (&lt;a href=&#34;https://namecheap.com&#34;&gt;Namecheap&lt;/a&gt;), it went down like this&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/dns.png&#34; alt=&#34;change a and cname records&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;my mail hosting is done via google, so i used namecheap&amp;rsquo;s option to &amp;ldquo;Automatically set MX records necessary for &lt;strong&gt;Google Apps Email&lt;/strong&gt;&amp;ldquo;&lt;/p&gt;

&lt;p&gt;dns propagation already happened for me (i did this about an hour ago), so it should be a smooth transtion all things considered.&lt;/p&gt;

&lt;h3 id=&#34;update-nov-19-2014:f7e0fd97bd7ea66b154d201dbbb1e9eb&#34;&gt;Update (Nov 19, 2014)&lt;/h3&gt;

&lt;p&gt;As per noisebleeds comment below, I&amp;rsquo;m attaching the updated DNS settings I had to use after Github made some changes to their network routing&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/dns1.png&#34; alt=&#34;change a and cname records&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/dns2.png&#34; alt=&#34;change a and cname records&#34; /&gt;
&lt;/p&gt;
</description>
    </item>
    
    
    <item>
      <title>hotfix 2</title>
      <link>http://localhost:1313/hotfix-2/</link>
      <pubDate>Mon, 06 Aug 2012 23:23:23 GMT</pubDate>
      
      <guid>http://localhost:1313/hotfix-2/</guid>
      <description>&lt;p&gt;i&amp;rsquo;ve built my esxi box (skynet) &amp;hellip; find some additional info at &lt;a href=&#34;http://lime-technology.com/forum/index.php?topic=21514.0&#34; title=&#34;skynet + hal &amp;amp; wopr (esxi head + 2 unraid das)&#34; target=&#34;_blank&#34;&gt;the unraid forums&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;something i wanted to document. the command sequence to share the encrypted zfs filesystem after boot is&lt;/p&gt;

&lt;blockquote&gt;sudo zfs mount -a (asks for the passphrase) &lt;br/&gt;
sudo zfs set share=name=export_backup,path=/export/backup,prot=nfs backup/data 
&lt;/blockquote&gt;

&lt;p&gt;the latter command is based on my setup
also, oracle recently published an article on &lt;a href=&#34;http://www.oracle.com/technetwork/articles/servers-storage-admin/manage-zfs-encryption-1715034.html&#34;&gt;How to manage ZFS Data Encryption&lt;/a&gt;, with more details about zfs data encryption.&lt;/p&gt;

&lt;p&gt;i haven&amp;rsquo;t processed it yet, but it&amp;rsquo;s worth a read&lt;/p&gt;
</description>
    </item>
    
    
    <item>
      <title>hotfix 1</title>
      <link>http://localhost:1313/hotfix-1/</link>
      <pubDate>Mon, 07 May 2012 23:23:23 GMT</pubDate>
      
      <guid>http://localhost:1313/hotfix-1/</guid>
      <description>&lt;p&gt;well, i need to add a couple of comments after my last post&lt;/p&gt;

&lt;p&gt;i deliberately chose to create the zfs dataset with a passphrase encryption method. as per solaris docs, this means it can&amp;rsquo;t mount it at boot time. the best practice would be a boot time prompt (a la TrueCrypt in windows), but until that time comes, i will live with loading after booting, using the following:&lt;/p&gt;

&lt;blockquote&gt;
sudo zfs mount -a
sudo zfs set share tank/backup
&lt;/blockquote&gt;

&lt;p&gt;here seems to be a better way by doing zfs set key -l, but docs are scarce&lt;/p&gt;

&lt;p&gt;you can check whether the folder is nfs exported by doing:&lt;/p&gt;

&lt;blockquote&gt;
showmount -e
&lt;/blockquote&gt;

&lt;p&gt;if you were to run crashplan on the zfs box, i would have to think that since the folder is empty upon boot, crashplan would detect it as deleted files. i need to investigate a bit further&lt;/p&gt;

&lt;p&gt;on the mac side, the disk utility method to mount the nfs export is not working correctly &amp;hellip; i resorted to&lt;/p&gt;

&lt;blockquote&gt;
mount_nfs zfsbox:/export/Backup /local_mountpoint
&lt;/blockquote&gt;

&lt;p&gt;this shows the mountpoint from the finder correctly &lt;a href=&#34;http://help.bombich.com/discussions/questions/3459-cloningcopying-to-or-from-an-nfs-share&#34;&gt;check some discussion about it here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    
    <item>
      <title>oh solaris mio !</title>
      <link>http://localhost:1313/oh-solaris-mio/</link>
      <pubDate>Mon, 07 May 2012 11:11:11 GMT</pubDate>
      
      <guid>http://localhost:1313/oh-solaris-mio/</guid>
      <description>&lt;p&gt;so the plan is as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;build a zfs box, with a two drive mirror pool&lt;/li&gt;
&lt;li&gt;rsync data from blackeard (my hackintosh mac) to the zfs box&lt;/li&gt;
&lt;li&gt;snaphot the zfs filesystem (full and incrementals)&lt;/li&gt;
&lt;li&gt;crashplan the backup to the cloud&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;this basically gives me a two factor backup scenario: time machine-like fast access (without all the storage wasting that time machine does, on the zfs box) and offsite more secure storage (crashplan pro on the cloud)&lt;/p&gt;

&lt;p&gt;so let&amp;rsquo;s start with my test setup&lt;/p&gt;

&lt;p&gt;download &lt;a href=&#34;http://www.oracle.com/technetwork/server-storage/solaris11/downloads/index.html&#34;&gt;Solaris 11 &lt;sup&gt;11&lt;/sup&gt;&amp;frasl;&lt;sub&gt;11&lt;/sub&gt;&lt;/a&gt; (you have to create an oracle account .. shrugs)&lt;/p&gt;

&lt;p&gt;install Solaris on a VirtualBox VM (chose VMDK as format, since it will be easier to transfer to ESXi)&lt;/p&gt;

&lt;p&gt;the first snag is related to NFSv4 &amp;hellip; although it&amp;rsquo;s supposed to do uid mapping, &lt;a href=&#34;http://dfusion.com.au/wiki/tiki-index.php?page=Why+NFSv4+UID+mapping+breaks+with+AUTH_UNIX&#34;&gt;it actually doesn&amp;rsquo;t&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;the first time i installed solaris i didn&amp;rsquo;t change the uid for my replica solaris user (same user as my mac box).&lt;/p&gt;

&lt;p&gt;so i installed again, but &amp;hellip; solaris 11 won&amp;rsquo;t allow root logins, not even via console. so i did the easiest thing possible, which is to enable root logins back &lt;a href=&#34;http://candon123.blog.51cto.com/704299/712206&#34;&gt;more info here&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
root@zfsbox# rolemod -K type=normal root
&lt;/blockquote&gt;

&lt;p&gt;so now drop to the root shell (su - won&amp;rsquo;t work) and do
&lt;blockquote&gt;
usermod -u &amp;lt;new uid&amp;gt; username
&lt;/blockquote&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.unix.com/solaris/183739-changing-uid-value.html&#34;&gt;here&amp;rsquo;s a link that gave me the idea on how to do this&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;new uid&amp;gt; should be the same uid as the user in the mac box.&lt;/p&gt;

&lt;p&gt;while on the root shell, do
&lt;blockquote&gt;
cd /home&lt;/p&gt;

&lt;p&gt;chown -R &amp;lt;username&amp;gt;:&amp;lt;group&amp;gt; &amp;lt;username&amp;gt;
&lt;/blockquote&gt;&lt;/p&gt;

&lt;p&gt;ok now solaris is installed. one of the first things i do with any new *nix box is setup public/private key ssh
&lt;blockquote&gt;
&lt;span&gt;$ ssh-keygen -t rsa&lt;/span&gt;
&lt;span&gt;$ cat ~/.ssh/id_rsa.pub | ssh user@machine &amp;ldquo;mkdir ~/.ssh; cat &amp;gt;&amp;gt; ~/.ssh/authorized_keys&amp;rdquo;&lt;br /&gt;&lt;/span&gt;
&lt;/blockquote&gt;&lt;/p&gt;

&lt;p&gt;could have use ssh-copy-id, but osx doesn&amp;rsquo;t have it by default and i&amp;rsquo;m too lazy to install it &lt;a href=&#34;http://www.commandlinefu.com/commands/view/188/copy-your-ssh-public-key-to-a-server-from-a-machine-that-doesnt-have-ssh-copy-id&#34;&gt;credits for the cat/ssh technique&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;now you have to edit /etc/ssh/sshd_config to disable password logins&lt;/p&gt;

&lt;p&gt;ok so we can ssh into the solaris box &amp;hellip; let&amp;rsquo;s build the backup pool&lt;/p&gt;

&lt;p&gt;i previously created two 51Gb virtual disks in VirtualBox, it&amp;rsquo;s time to use them
&lt;blockquote&gt;
user@zfsbox$ format
&lt;/blockquote&gt;&lt;/p&gt;

&lt;p&gt;this shows the name of the disks. now let&amp;rsquo;s create the pool
&lt;blockquote&gt;
user@zfsbox$ sudo zpool create tank mirror c3t2d0 c3t3d0
&lt;/blockquote&gt;&lt;/p&gt;

&lt;p&gt;now the filesystem, which crashplan will back up
&lt;blockquote&gt;
user@zfsbox$ sudo zfs create -o atime=off -o mountpoint=/export/backup -o sharenfs=on -o compression=on -o encryption=aes-256-ccm tank/backup
&lt;/blockquote&gt;&lt;/p&gt;

&lt;p&gt;by default, zfs creates the /export/backup mount point with root:root ownership. make it writable for your user
&lt;blockquote&gt;
user@zfsbox$ sudo chown -R &amp;lt;username&amp;gt;:&amp;lt;groupname&amp;gt; /export/backup
&lt;/blockquote&gt;&lt;/p&gt;

&lt;p&gt;now, you can rsync from mac to zfs
&lt;blockquote&gt;
user@macbox$ rsync -avn &amp;ndash;progress -e ssh ~/Storage user@zfsbox:/export/backup
&lt;/blockquote&gt;&lt;/p&gt;

&lt;p&gt;you should be all set now, watching your /export/backup folder having grown with your backup data.&lt;/p&gt;

&lt;p&gt;something else &amp;hellip; in order to watch that data through nfs&lt;/p&gt;

&lt;p&gt;go to disk utility, in the menu choose nfs mounts &amp;hellip; and add the nfs mountpoint, pay special attention to the advanced mount options, should be something like this
&lt;blockquote&gt;
resvport,vers=4,nolocks,locallocks,intr,soft,wsize=32768,rsize=32768
&lt;/blockquote&gt;&lt;/p&gt;

&lt;p&gt;next up, we&amp;rsquo;ll work with the zfs snapshots, try to come up a script that automates the rsyncing and the snapshot creation and send it all up to crashplan&lt;/p&gt;
</description>
    </item>
    
    
    <item>
      <title>storage wars</title>
      <link>http://localhost:1313/storage-wars/</link>
      <pubDate>Sun, 06 May 2012 23:23:23 GMT</pubDate>
      
      <guid>http://localhost:1313/storage-wars/</guid>
      <description>&lt;p&gt;i&amp;rsquo;m currently running an &lt;a href=&#34;http://lime-technology.com&#34;&gt;unRaid&lt;/a&gt; server, which hosts my media collection  (movies, tv series, music, pictures and data backups)&lt;/p&gt;

&lt;p&gt;but, i&amp;rsquo;m running out of space on the server (currently 31.69TB used out of 32.51TB available)&lt;/p&gt;

&lt;p&gt;so i started looking for options on how to expand my capacity and decided on adding a second unRaid server, virtualizing both unRaids in an ESXi 5 head server and putting the disks on two DAS boxes (discussions at &lt;a href=&#34;http://lime-technology.com/forum/index.php?topic=14521.0&#34;&gt;two unraid servers&lt;/a&gt;, &lt;a href=&#34;http://lime-technology.com/forum/index.php?topic=14695.0&#34;&gt;atlas: a virtualized unraid&lt;/a&gt;, &lt;a href=&#34;http://www.servethehome.com/sas-expanders-diy-cheap-low-cost-jbod-enclosures-raid/&#34;&gt;building a jbod das&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;at some point during that span of time, zfs came up. i researched as much as i could and finally found this enlightening thread: &lt;a href=&#34;http://forum.xbmc.org/showthread.php?tid=82811&amp;amp;amp;page=17&#34;&gt;Freenas vs unRaid&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;my take on this whole storage wars is that each solution has its merits and my plan changed slightly&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;continue with the virtualized + das boxes unraid setup&lt;/li&gt;
&lt;li&gt;add a virtualized zfs implementation to backup my osx data&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;the idea is that unRaid is much better suited to hold an expanding media collection, where i can add drives when needed and keep having one parity disk to protect the array. under zfs, every drive (or more precisely every vdev) would hit me with a parity space penalty&lt;/p&gt;

&lt;p&gt;in my next posts, i will write down my zfs test scenario, while i wait for the parts of my all-encompassing ESXi build&lt;/p&gt;
</description>
    </item>
    
    
    <item>
      <title>windows 8 consumer preview</title>
      <link>http://localhost:1313/windows-8-consumer-preview/</link>
      <pubDate>Thu, 08 Mar 2012 23:23:23 GMT</pubDate>
      
      <guid>http://localhost:1313/windows-8-consumer-preview/</guid>
      <description>&lt;p&gt;i think it&amp;rsquo;s relevant to post some of the media sentiment about the latest iteration of windows 8.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.winsupersite.com/article/windows8/windows-8-consumer-preview-sense-142496&#34;&gt;Paul Thurrott (of winsupersite.com fame)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.askwoody.com/2012/windows-veteran-windows-8-consumer-preview/&#34;&gt;Woody Leonhard (of askwoody.com fame)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    
    <item>
      <title>if it ain&#39;t broken, don&#39;t fix it ?</title>
      <link>http://localhost:1313/if-it-ain-t-broken-don-t-fix-it/</link>
      <pubDate>Thu, 23 Feb 2012 23:23:23 GMT</pubDate>
      
      <guid>http://localhost:1313/if-it-ain-t-broken-don-t-fix-it/</guid>
      <description>&lt;p&gt;A nice article about upcoming Windows 8 was posted by James Kendrick at ZDNet &amp;hellip; &lt;a href=&#34;http://www.zdnet.com/blog/mobile-news/what-problem-does-windows-8-solve/6856&#34;&gt;What problem does Window 8 solve ?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I find the new logo kind of hideous :)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>